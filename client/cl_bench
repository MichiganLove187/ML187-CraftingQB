local QBCore = exports['qb-core']:GetCoreObject()
local PlacedBenches = {}
local BenchObjects = {}
local isPlacing = false
local currentBenchType = nil
local currentBenchObject = nil
local currentBenchRotation = 0.0

-- Check if placeable benches are properly configured
if not Config.PlaceableBenches or type(Config.PlaceableBenches) ~= "table" then
    Config.PlaceableBenches = {
        Enabled = true,
        UseQBTarget = true,
        MaxPerPlayer = 3,
        Types = {}
    }
    print("Warning: Config.PlaceableBenches is not properly configured. Using default values.")
end

-- Ensure Types exists
if not Config.PlaceableBenches.Types then
    Config.PlaceableBenches.Types = {}
end

-- Sync benches across all clients
RegisterNetEvent('crafting:client:SyncBench', function(benchData, isAdding)
    if isAdding then
        -- Add bench to local storage
        PlacedBenches[benchData.id] = benchData
        
        -- Create the physical bench object
        local benchConfig = Config.PlaceableBenches.Types[benchData.benchType]
        if not benchConfig then return end
        
        local model = GetHashKey(benchConfig.model)
        RequestModel(model)
        while not HasModelLoaded(model) do
            Wait(10)
        end
        
        local object = CreateObject(model, benchData.coords.x, benchData.coords.y, benchData.coords.z, false, false, false)
        SetEntityHeading(object, benchData.heading)
        FreezeEntityPosition(object, true)
        SetEntityAsMissionEntity(object, true, true)
        
        -- Store the object reference
        BenchObjects[benchData.id] = object
        
        -- Create interaction based on config
        if Config.PlaceableBenches.UseQBTarget then
            exports['qb-target']:AddTargetEntity(object, {
                options = {
                    {
                        type = "client",
                        event = "crafting:client:OpenBenchMenu",
                        icon = "fas fa-hammer",
                        label = "Use " .. benchConfig.name,
                        benchId = benchData.id
                    },
                    {
                        type = "client",
                        event = "crafting:client:PickupBench",
                        icon = "fas fa-hand-paper",
                        label = "Pick Up " .. benchConfig.name,
                        benchId = benchData.id,
                        canInteract = function()
                            local PlayerData = QBCore.Functions.GetPlayerData()
                            return PlayerData.citizenid == benchData.citizenid
                        end
                    }
                },
                distance = 2.0
            })
        end
    else
        -- Remove bench from local storage
        local benchId = benchData.id
        
        if BenchObjects[benchId] and DoesEntityExist(BenchObjects[benchId]) then
            -- Remove target if using qb-target
            if Config.PlaceableBenches.UseQBTarget then
                exports['qb-target']:RemoveTargetEntity(BenchObjects[benchId])
            end
            
            -- Delete the physical object
            DeleteEntity(BenchObjects[benchId])
            BenchObjects[benchId] = nil
        end
        
        PlacedBenches[benchId] = nil
    end
end)

-- Load all benches when player joins
RegisterNetEvent('QBCore:Client:OnPlayerLoaded', function()
    QBCore.Functions.TriggerCallback('crafting:server:GetPlacedBenches', function(benches)
        for id, benchData in pairs(benches) do
            TriggerEvent('crafting:client:SyncBench', benchData, true)
        end
    end)
end)

-- Thread for DrawText interaction if not using qb-target
CreateThread(function()
    if Config.PlaceableBenches.UseQBTarget then return end
    
    while true do
        local sleep = 1000
        local playerPed = PlayerPedId()
        local playerCoords = GetEntityCoords(playerPed)
        local PlayerData = QBCore.Functions.GetPlayerData()
        
        for id, benchData in pairs(PlacedBenches) do
            local benchConfig = Config.PlaceableBenches.Types[benchData.benchType]
            if benchConfig and BenchObjects[id] and DoesEntityExist(BenchObjects[id]) then
                local objectCoords = GetEntityCoords(BenchObjects[id])
                local distance = #(playerCoords - objectCoords)
                
                if distance < 5.0 then
                    sleep = 0
                    
                    if distance < 2.0 then
                        local text = '[E] Use ' .. benchConfig.name
                        if PlayerData.citizenid == benchData.citizenid then
                            text = text .. ' | [G] Pick Up'
                        end
                        
                        DrawText3D(objectCoords.x, objectCoords.y, objectCoords.z + (benchConfig.zOffset or 1.0), text)
                        
                        if IsControlJustReleased(0, 38) then -- E key
                            TriggerEvent('crafting:client:OpenBenchMenu', {benchId = id})
                        end
                        
                        if IsControlJustReleased(0, 47) and PlayerData.citizenid == benchData.citizenid then -- G key
                            TriggerEvent('crafting:client:PickupBench', {benchId = id})
                        end
                    end
                end
            end
        end
        
        Wait(sleep)
    end
end)

RegisterNetEvent('crafting:client:PlaceBench', function(benchType)
    if isPlacing then return end
    
    local benchConfig = Config.PlaceableBenches.Types[benchType]
    if not benchConfig then return end
    
    isPlacing = true
    currentBenchType = benchType
    currentBenchRotation = 0.0
    local currentHeight = 0.0
    
    -- Create preview object immediately at cursor position
    local model = GetHashKey(benchConfig.model)
    RequestModel(model)
    
    -- Show loading notification while model loads
    QBCore.Functions.Notify("Preparing bench placement...", "primary", 2000)
    
    -- Load model with a progress bar instead of a blocking loop
    CreateThread(function()
        while not HasModelLoaded(model) do
            RequestModel(model)
            Wait(10)
        end
        
        -- Get initial position from camera raycast
        local hit, coords, entity = OptimizedRayCast(5.0)
        local initialCoords = coords
        if not hit then
            -- Fallback to player position if raycast fails
            local playerPed = PlayerPedId()
            local playerCoords = GetEntityCoords(playerPed)
            local forward = GetEntityForwardVector(playerPed)
            initialCoords = playerCoords + forward * 1.0
        end
        
        -- Create object at initial position
        currentBenchObject = CreateObject(model, initialCoords.x, initialCoords.y, initialCoords.z, false, false, false)
        SetEntityHeading(currentBenchObject, GetEntityHeading(PlayerPedId()))
        SetEntityAlpha(currentBenchObject, 200, false)
        SetEntityCollision(currentBenchObject, false, false)
        
        -- Instructions
        QBCore.Functions.Notify("Controls:", "primary", 10000)
        QBCore.Functions.Notify("SCROLL WHEEL: Rotate | ARROW KEYS: Adjust Height", "primary", 10000)
        QBCore.Functions.Notify("ENTER: Confirm Placement | BACKSPACE: Cancel", "primary", 10000)
        
        -- Start the placement loop immediately
        CreateThread(function()
            local lastRaycastTime = 0
            
            while isPlacing do
                local currentTime = GetGameTimer()
                local playerPed = PlayerPedId()
                local playerCoords = GetEntityCoords(playerPed)
                
                -- Perform raycasting more frequently for responsive movement
                if currentTime - lastRaycastTime > 50 then
                    lastRaycastTime = currentTime
                    local hit, coords, entity = OptimizedRayCast(5.0)
                    
                    if hit then
                        -- Apply height adjustment
                        local adjustedCoords = vector3(coords.x, coords.y, coords.z + currentHeight)
                        
                        -- Update object position
                        SetEntityCoords(currentBenchObject, adjustedCoords.x, adjustedCoords.y, adjustedCoords.z)
                        SetEntityHeading(currentBenchObject, currentBenchRotation)
                    end
                end
                
                -- Handle rotation with scroll wheel
                if IsControlJustPressed(0, 14) then -- Scroll down
                    currentBenchRotation = currentBenchRotation + 5.0
                    if currentBenchRotation > 360.0 then currentBenchRotation = 0.0 end
                elseif IsControlJustPressed(0, 15) then -- Scroll up
                    currentBenchRotation = currentBenchRotation - 5.0
                    if currentBenchRotation < 0.0 then currentBenchRotation = 360.0 end
                end
                
                -- Handle height adjustment with arrow keys
                if IsControlJustPressed(0, 172) then -- Arrow Up
                    currentHeight = currentHeight + 0.05
                elseif IsControlJustPressed(0, 173) then -- Arrow Down
                    currentHeight = currentHeight - 0.05
                elseif IsControlJustPressed(0, 174) then -- Arrow Left
                    currentHeight = currentHeight - 0.01
                elseif IsControlJustPressed(0, 175) then -- Arrow Right
                    currentHeight = currentHeight + 0.01
                end
                
                -- Always display the height text
                if DoesEntityExist(currentBenchObject) then
                    local objectCoords = GetEntityCoords(currentBenchObject)
                    local heightText = string.format("Height: %.2f", currentHeight)
                    DrawText3D(objectCoords.x, objectCoords.y, objectCoords.z + 0.5, heightText)
                end
                
                -- Place bench with Enter key
                if IsControlJustReleased(0, 18) then -- Enter key
                    if DoesEntityExist(currentBenchObject) then
                        local finalCoords = GetEntityCoords(currentBenchObject)
                        isPlacing = false
                        DeleteObject(currentBenchObject)
                        currentBenchObject = nil
                        
                        -- Trigger server event to save bench
                        TriggerServerEvent('crafting:server:PlaceBench', currentBenchType, finalCoords, currentBenchRotation)
                    end
                end
                
                -- Cancel with Backspace key
                if IsControlJustReleased(0, 177) then -- Backspace key
                    isPlacing = false
                    if DoesEntityExist(currentBenchObject) then
                        DeleteObject(currentBenchObject)
                        currentBenchObject = nil
                    end
                    QBCore.Functions.Notify("Bench placement cancelled.", "error")
                end
                
                Wait(0)
            end
        end)
    end)
end)

-- Open bench menu
RegisterNetEvent('crafting:client:OpenBenchMenu', function(data)
    if not data or not data.benchId then return end
    
    local benchData = PlacedBenches[data.benchId]
    if not benchData then return end
    
    local benchConfig = Config.PlaceableBenches.Types[benchData.benchType]
    if not benchConfig then return end
    
    -- Create a virtual bench object to pass to your existing OpenCraftingMenu function
    local virtualBench = {
        name = benchConfig.name,
        coords = benchData.coords,
        radius = 2.0,
        recipes = benchConfig.recipes
    }
    
    -- Use your existing function to open the crafting menu
    OpenCraftingMenu(virtualBench)
end)

-- Pickup bench
RegisterNetEvent('crafting:client:PickupBench', function(data)
    if not data or not data.benchId then return end
    
    local benchId = data.benchId
    if not PlacedBenches[benchId] then return end
    
    -- Trigger server event to remove bench
    TriggerServerEvent('crafting:server:RemoveBench', benchId)
end)

-- Utility function for raycasting
function OptimizedRayCast(distance)
    local camCoords = GetGameplayCamCoord()
    local camRot = GetGameplayCamRot(2)
    local camForward = CamRotationToDirection(camRot)
    local rayTo = vector3(
        camCoords.x + camForward.x * distance,
        camCoords.y + camForward.y * distance,
        camCoords.z + camForward.z * distance
    )
    
    -- Use StartShapeTestRay for faster, more responsive raycasts
    local rayHandle = StartShapeTestRay(
        camCoords.x, camCoords.y, camCoords.z,
        rayTo.x, rayTo.y, rayTo.z,
        1, PlayerPedId(), 0
    )
    
    local _, hit, endCoords, _, entity = GetShapeTestResult(rayHandle)
    return hit == 1, endCoords, entity
end

-- More efficient rotation to direction calculation
function CamRotationToDirection(rotation)
    local rotZ = math.rad(rotation.z)
    local rotX = math.rad(rotation.x)
    local cosRotX = math.abs(math.cos(rotX))
    
    return vector3(
        -math.sin(rotZ) * cosRotX,
        math.cos(rotZ) * cosRotX,
        math.sin(rotX)
    )
end

function RotationToDirection(rotation)
    local adjustedRotation = {
        x = (math.pi / 180) * rotation.x,
        y = (math.pi / 180) * rotation.y,
        z = (math.pi / 180) * rotation.z
    }
    local direction = {
        x = -math.sin(adjustedRotation.z) * math.abs(math.cos(adjustedRotation.x)),
        y = math.cos(adjustedRotation.z) * math.abs(math.cos(adjustedRotation.x)),
        z = math.sin(adjustedRotation.x)
    }
    return direction
end

-- Add DrawText3D function if it doesn't exist
if not DrawText3D then
    function DrawText3D(x, y, z, text)
        SetTextScale(0.35, 0.35)
        SetTextFont(4)
        SetTextProportional(1)
        SetTextColour(255, 255, 255, 215)
        SetTextEntry("STRING")
        SetTextCentre(true)
        AddTextComponentString(text)
        SetDrawOrigin(x, y, z, 0)
        DrawText(0.0, 0.0)
        local factor = (string.len(text)) / 370
        DrawRect(0.0, 0.0+0.0125, 0.017+ factor, 0.03, 0, 0, 0, 75)
        ClearDrawOrigin()
    end
end
